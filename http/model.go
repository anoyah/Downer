package http

import (
	"fmt"
	"time"
)

type AutoGenerated struct {
	SchemaVersion int    `json:"schemaVersion"`
	MediaType     string `json:"mediaType"`
	Config        struct {
		MediaType string `json:"mediaType"`
		Digest    string `json:"digest"`
		Size      int    `json:"size"`
	} `json:"config"`
	Layers []struct {
		MediaType string `json:"mediaType"`
		Digest    string `json:"digest"`
		Size      int    `json:"size"`
	} `json:"layers"`
	Annotations struct {
		ComDockerOfficialImagesBashbrewArch string    `json:"com.docker.official-images.bashbrew.arch"`
		OrgOpencontainersImageBaseDigest    string    `json:"org.opencontainers.image.base.digest"`
		OrgOpencontainersImageBaseName      string    `json:"org.opencontainers.image.base.name"`
		OrgOpencontainersImageCreated       time.Time `json:"org.opencontainers.image.created"`
		OrgOpencontainersImageRevision      string    `json:"org.opencontainers.image.revision"`
		OrgOpencontainersImageSource        string    `json:"org.opencontainers.image.source"`
		OrgOpencontainersImageURL           string    `json:"org.opencontainers.image.url"`
		OrgOpencontainersImageVersion       string    `json:"org.opencontainers.image.version"`
	} `json:"annotations"`
}

type DigestModel struct {
	Architecture string `json:"architecture"`
	Config       struct {
		ExposedPorts struct {
			Eight0TCP struct {
			} `json:"80/tcp"`
		} `json:"ExposedPorts"`
		Env        []string `json:"Env"`
		Entrypoint []string `json:"Entrypoint"`
		Cmd        []string `json:"Cmd"`
		WorkingDir string   `json:"WorkingDir"`
		Labels     struct {
			Maintainer string `json:"maintainer"`
		} `json:"Labels"`
		StopSignal string `json:"StopSignal"`
	} `json:"config"`
	Created time.Time `json:"created"`
	History []struct {
		Created    time.Time `json:"created"`
		CreatedBy  string    `json:"created_by"`
		Comment    string    `json:"comment"`
		EmptyLayer bool      `json:"empty_layer,omitempty"`
	} `json:"history"`
	Os     string `json:"os"`
	Rootfs struct {
		Type    string   `json:"type"`
		DiffIds []string `json:"diff_ids"`
	} `json:"rootfs"`
	Variant string `json:"variant"`
}

type TokenInfo struct {
	Token       string    `json:"token"`
	AccessToken string    `json:"access_token"`
	ExpiresIn   int       `json:"expires_in"`
	IssuedAt    time.Time `json:"issued_at"`
}

type Manifest struct {
	Arch      string `json:"arch"`
	Digest    string `json:"digest"`
	MediaType string `json:"mediaType"`
}

type RootManifest struct {
	Config   string   `json:"Config"`
	RepoTags []string `json:"RepoTags"`
	Layers   []string `json:"Layers"`
}

type AuthMD struct {
	AuthUrl string `json:"auth_url"`
	Service string `json:"service"`
	Scope   string `json:"scope"`
}

func (a *AuthMD) BuildAuthUrl() string {
	return fmt.Sprintf("%s?service=%s&scope=%s", a.AuthUrl, a.Service, a.Scope)
}
